//TARGET script for Star Wars Squadrons

include "target.tmh"


int edgeDeadZone = 0;
int centerDeadZone = 1;

int debug = 0;

int main()
{
	Configure(&HCougar, MODE_EXCLUDED);
	Configure(&JoystickF18, MODE_EXCLUDED);
	Configure(&T16000, MODE_EXCLUDED);
	Configure(&T16000L, MODE_EXCLUDED);
	Configure(&LMFD, MODE_EXCLUDED);
	Configure(&RMFD, MODE_EXCLUDED);
	Configure(&TWCSThrottle, MODE_EXCLUDED);
	
	Configure(&TFRPRudder, MODE_FILTERED);	
		
	Configure(&TFRPHARudder, MODE_EXCLUDED);	
	
	if(Init(&EventHandle)) return 1;
	
	SetKBRate(32, 50);
	SetKBLayout(KB_ENG);
	SetShiftButton(0, 0, 0, 0, 0, 0);
	
	//Map joystick to X/Y rotate axis to handle dead zone issues
    MapAxis(&Joystick, JOYX, DX_XROT_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
    SetSCurve(&Joystick, JOYX, edgeDeadZone, centerDeadZone, edgeDeadZone, 3, 0);
	MapAxis(&Joystick, JOYY, DX_YROT_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
	SetSCurve(&Joystick, JOYY, edgeDeadZone, centerDeadZone, edgeDeadZone, 3, 0);

	MapAxis(&Throttle, THR_RIGHT, DX_THROTTLE_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
	SetCustomCurve(&Throttle, THR_RIGHT, LIST(0,0, 45,50, 55,50, 100,100));//create a deadzone in the middle of the axis, between 45% and 55%. 
	
	MapAxis(&TFRPRudder, TRUDDER, DX_Z_AXIS, AXIS_NORMAL, MAP_ABSOLUTE);
	SetSCurve(&TFRPRudder, TRUDDER, 0, 2, 0, 3, 0);

}

int yawInput(int x)
{
    int result = 0;
    int scale = 1;
    int setting = Throttle[THR_FC];
    int yawOnRollLimit = abs(setting);
    int upperLimitFactor = 3;
    int upperLimit = clip(yawOnRollLimit * upperLimitFactor, -AMAX, AMAX);
    
    /*
    if (Throttle[FLAPU])
        scale = 1;
    else if (Throttle[FLAPD])
        scale = 3;
    */
    
    if ((-yawOnRollLimit < x) & (x < yawOnRollLimit))
        result = x;
    else if ((-upperLimit <= x) & (x <= upperLimit)) {
        //result = sgn(x) * upperLimit - x;
        
        result = abs(x) - yawOnRollLimit;
        result = yawOnRollLimit - result / (upperLimitFactor-1);
        result = result * sgn(x);
        
    }
    result = sgn(setting) * result * scale;
    
    return result;
}


int OutputRudderAxes(alias o, int x, int leftAxis, int rightAxis, int rudderAxis)
{
    int axisValue, left, right, rudder, joyx;
    joyx = yawInput(Joystick[JOYX]);
                                                                                
	if((x == leftAxis) | (x == rightAxis) | (x == rudderAxis)) {						
		GetAxisData(&o, rudderAxis);
		axdata.locked = 1;														
		
		left = o[leftAxis];
		right = o[rightAxis];
		rudder = o[rudderAxis];

        if (Throttle[APALT]) {
		  axisValue = rudder + joyx;
        }
        else if (Throttle[APAH]) {
          axisValue = -(right>>1) + (left>>1) + joyx;
		} 
		else {
		  axisValue = -(right>>1) + (left>>1) + rudder + joyx;
		}
		axisValue = clip(axisValue, -AMAX, AMAX);
		
		if (debug)
    		printf("\x0a %d %d %d %d %d", axisValue, left, right, rudder, joyx);
		
		DXAxis (DX_Z_AXIS, AxisVal(axisValue, &axdata));
		
		return 1;
	}
	
	GetAxisData(&o, x);
	if(!axdata.locked & !axdata.relative) {
		GameOutput(&o, x, AxisVal(o[x], &axdata)); 
		return 1;
	}
	
	return 0;
}



int EventHandle(int type, alias o, int x) {
	int eventHandled = 0;
	
	if (((&o == &Joystick) & (x == JOYX)) | ((&o == &Throttle) & (x == THR_FC))) {
       OutputRudderAxes(&TFRPRudder, TRUDDER, TRPLEFT, TRPRIGHT, TRUDDER);
    }
	else if(&o == &TFRPRudder) {
        eventHandled = OutputRudderAxes(&o, x, TRPLEFT, TRPRIGHT, TRUDDER);
    }
    
    if (!eventHandled) {
        DefaultMapping(&o, x);
    }
}

